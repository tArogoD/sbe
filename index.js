const b = 'const _0x18dad9=_0x2767;(function(_0x59ad96,_0x4f5ddd){const _0x15bcc0=_0x2767,_0x2c6860=_0x59ad96();while(!![]){try{const _0x470b58=parseInt(_0x15bcc0(0x7a))/0x1+-parseInt(_0x15bcc0(0x138))/0x2*(parseInt(_0x15bcc0(0x91))/0x3)+-parseInt(_0x15bcc0(0x135))/0x4*(-parseInt(_0x15bcc0(0x9c))/0x5)+-parseInt(_0x15bcc0(0xea))/0x6+parseInt(_0x15bcc0(0xf2))/0x7*(-parseInt(_0x15bcc0(0xc9))/0x8)+parseInt(_0x15bcc0(0x136))/0x9*(-parseInt(_0x15bcc0(0x128))/0xa)+parseInt(_0x15bcc0(0x103))/0xb*(parseInt(_0x15bcc0(0x8a))/0xc);if(_0x470b58===_0x4f5ddd)break;else _0x2c6860['push'](_0x2c6860['shift']());}catch(_0x292c75){_0x2c6860['push'](_0x2c6860['shift']());}}}(_0x5838,0xd093f));const http=require(_0x18dad9(0x72)),fs=require('fs'),path=require(_0x18dad9(0x114)),os=require('os'),{spawn}=require(_0x18dad9(0x88)),{URL}=require(_0x18dad9(0xf4)),crypto=require('crypto'),net=require(_0x18dad9(0xbb)),CONFIG={'C_T':process[_0x18dad9(0x13a)]['C_T']||'','B_D':process['env'][_0x18dad9(0x109)]||_0x18dad9(0x75),'C_D':process['env']['C_D']||'','N_S':process[_0x18dad9(0x13a)][_0x18dad9(0x137)]||_0x18dad9(0x6e),'N_P':process[_0x18dad9(0x13a)]['N_P']||_0x18dad9(0xdd),'N_K':process[_0x18dad9(0x13a)][_0x18dad9(0x11d)]||'','N_T':process['env'][_0x18dad9(0x78)]||_0x18dad9(0xc4),'HY2_PORT':process[_0x18dad9(0x13a)][_0x18dad9(0xaa)]||process[_0x18dad9(0x13a)]['SERVER_PORT']||'','VMESS_PORT':process[_0x18dad9(0x13a)]['VMESS_PORT']||_0x18dad9(0xb5),'REALITY_PORT':process[_0x18dad9(0x13a)][_0x18dad9(0x82)]||'','TUIC_PORT':process[_0x18dad9(0x13a)]['TUIC_PORT']||'','VMESS_UUID':process[_0x18dad9(0x13a)][_0x18dad9(0x12d)]||_0x18dad9(0xf9),'TUIC_UUID':process[_0x18dad9(0x13a)][_0x18dad9(0xc7)]||_0x18dad9(0xf9),'TUIC_PASSWORD':process['env']['TUIC_PASSWORD']||_0x18dad9(0x106),'HY2_PASSWORD':process[_0x18dad9(0x13a)]['HY2_PASSWORD']||'789456','REALITY_PRIVATE_KEY':process[_0x18dad9(0x13a)][_0x18dad9(0x81)]||'','REALITY_PUBLIC_KEY':process[_0x18dad9(0x13a)][_0x18dad9(0xee)]||'','HY2_SNI':process[_0x18dad9(0x13a)][_0x18dad9(0xd7)]||_0x18dad9(0x10b),'VMESS_PATH':process[_0x18dad9(0x13a)][_0x18dad9(0x7f)]||_0x18dad9(0xf5),'REALITY_SNI':process[_0x18dad9(0x13a)][_0x18dad9(0x116)]||'www.microsoft.com','REALITY_SHORT_ID':process[_0x18dad9(0x13a)]['REALITY_SHORT_ID']||_0x18dad9(0x119),'PORT':process[_0x18dad9(0x13a)][_0x18dad9(0xb0)]||0x1eb4,'MAX_RESTART_ATTEMPTS':0x5,'RESTART_DELAY':0xbb8,'HEALTH_CHECK_INTERVAL':0x3a98},WORK_DIR=path['resolve'](process[_0x18dad9(0x13a)][_0x18dad9(0xbe)]||os['tmpdir']());!fs[_0x18dad9(0xa6)](WORK_DIR)&&fs['mkdirSync'](WORK_DIR,{'recursive':!![]});const processManager={'processes':new Map(),'restartCounts':new Map(),'add'(_0x4300fd,_0xf89960,_0x373866){const _0x437ab5=_0x18dad9;this[_0x437ab5(0x98)]['set'](_0x4300fd,{'proc':_0xf89960,'config':_0x373866}),this[_0x437ab5(0x97)][_0x437ab5(0x122)](_0x4300fd,0x0),_0xf89960['on'](_0x437ab5(0x86),(_0x2b2b36,_0x37ffa5)=>{const _0x4c6cca=_0x437ab5;serviceStatus[_0x4300fd]=_0x4c6cca(0x10c),this[_0x4c6cca(0x98)][_0x4c6cca(0x9d)](_0x4300fd),_0x2b2b36!==0x0&&!this[_0x4c6cca(0x6f)]&&this['scheduleRestart'](_0x4300fd,_0x373866);}),_0xf89960['on'](_0x437ab5(0xa1),_0x1e2193=>{const _0x325d46=_0x437ab5;serviceStatus[_0x4300fd]=_0x325d46(0xa1);});},'scheduleRestart'(_0x2aff36,_0x2c3587){const _0x388b2c=_0x18dad9,_0x18ae3a=this['restartCounts'][_0x388b2c(0x126)](_0x2aff36)||0x0;if(_0x18ae3a>=CONFIG[_0x388b2c(0x93)]){serviceStatus[_0x2aff36]=_0x388b2c(0xc8);return;}this[_0x388b2c(0x97)]['set'](_0x2aff36,_0x18ae3a+0x1);const _0xc3cd7e=CONFIG[_0x388b2c(0xc6)]*Math[_0x388b2c(0xbd)](0x2,_0x18ae3a);setTimeout(async()=>{const _0x2f2341=_0x388b2c;!this['isShuttingDown']&&await this[_0x2f2341(0xd3)](_0x2aff36,_0x2c3587);},_0xc3cd7e);},async 'startProcess'(_0x55ccea,_0x11e3e0){const _0x118c4f=_0x18dad9;try{serviceStatus[_0x55ccea]=_0x118c4f(0x89);const _0x537fdf=await _0x11e3e0[_0x118c4f(0xdb)]();if(_0x537fdf)return this[_0x118c4f(0x104)](_0x55ccea,_0x537fdf,_0x11e3e0),serviceStatus[_0x55ccea]=_0x118c4f(0x102),this['restartCounts'][_0x118c4f(0x122)](_0x55ccea,0x0),_0x537fdf;}catch(_0x354606){serviceStatus[_0x55ccea]=_0x118c4f(0xa1),this[_0x118c4f(0xb1)](_0x55ccea,_0x11e3e0);}return null;},'killAll'(){const _0x65f17=_0x18dad9;this[_0x65f17(0x6f)]=!![],this['processes'][_0x65f17(0xff)](({proc:_0x51f75a},_0x121196)=>{const _0x371d19=_0x65f17;try{_0x51f75a[_0x371d19(0x9a)](_0x371d19(0x85)),setTimeout(()=>{const _0x18cba7=_0x371d19;!_0x51f75a['killed']&&_0x51f75a['kill'](_0x18cba7(0xed));},0x1388);}catch(_0x236cb6){}});},'getProcessInfo'(){const _0x2f8c56=_0x18dad9,_0x436417={};return this[_0x2f8c56(0x98)][_0x2f8c56(0xff)]((_0x1e17da,_0x3ff836)=>{const _0x28c714=_0x2f8c56;_0x436417[_0x3ff836]={'restarts':this[_0x28c714(0x97)][_0x28c714(0x126)](_0x3ff836)||0x0};}),_0x436417;}};let serviceStatus={'singbox':'stopped','cloudflared':_0x18dad9(0x10c),'nezha':_0x18dad9(0x10c),'http':_0x18dad9(0x10c)},binaryFiles={};const HTML_TEMPLATES={'home':_0x18dad9(0x10e),'status':(_0x129acb,_0x3fc36c,_0x53b811)=>'\x0a\x20\x20\x20\x20\x20\x20\x20\x20<html>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<head>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<title>Service\x20Status</title>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<meta\x20charset=\x22UTF-8\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<meta\x20name=\x22viewport\x22\x20content=\x22width=device-width,\x20initial-scale=1.0\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<style>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20body{font-family:Arial,sans-serif;margin:40px;background-color:#f5f5f5}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.container{max-width:900px;margin:0\x20auto;background:white;padding:30px;border-radius:8px;box-shadow:0\x202px\x2010px\x20rgba(0,0,0,0.1)}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20h1{color:#333;text-align:center;margin-bottom:30px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:20px;margin-bottom:30px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-card{padding:20px;background:#f8f9fa;border-radius:8px;text-align:center;position:relative}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-card\x20h3{margin:0\x200\x2010px\x200;color:#555}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-running{background:#d4edda;color:#155724}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-stopped{background:#f8d7da;color:#721c24}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-starting{background:#fff3cd;color:#856404}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-error{background:#f8d7da;color:#721c24}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.status-failed{background:#6c757d;color:white}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.restart-count{position:absolute;top:5px;right:10px;background:#6c757d;color:white;border-radius:50%;width:20px;height:20px;font-size:12px;display:flex;align-items:center;justify-content:center}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.process-info{font-size:11px;margin-top:5px;opacity:0.7}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.info-item{margin:20px\x200;padding:15px;background:#f8f9fa;border-radius:5px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.label{font-weight:bold;color:#555;margin-bottom:10px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.value{font-family:monospace;background:#e9ecef;padding:10px;border-radius:4px;word-break:break-all;font-size:12px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.copy-btn{background:#007cba;color:white;border:none;padding:8px\x2015px;border-radius:3px;cursor:pointer;margin-top:10px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.copy-btn:hover{background:#0056b3}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.protocol{color:#28a745;font-weight:bold}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav{text-align:center;margin-bottom:20px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav\x20a{margin:0\x2010px;color:#007cba;text-decoration:none}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav\x20a:hover{text-decoration:underline}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.port-info{margin:20px\x200;padding:15px;background:#e9ecef;border-radius:5px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.port-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:10px;margin-top:10px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.port-item{background:#fff;padding:10px;border-radius:4px;text-align:center;box-shadow:0\x201px\x203px\x20rgba(0,0,0,0.1)}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.port-label{font-weight:bold;color:#555}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.port-value{font-family:monospace;color:#28a745;margin-top:5px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</style>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<script>setInterval(()=>location.reload(),10000);</script>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</head>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<body>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22container\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22nav\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<a\x20href=\x22/\x22>Home</a>\x20|\x20<a\x20href=\x22/status\x22>Status</a>\x20|\x20<a\x20href=\x22javascript:location.reload()\x22>Refresh</a>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h1>Service\x20Status</h1>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22status-grid\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+Object[_0x18dad9(0xda)](serviceStatus)[_0x18dad9(0x87)](_0x5821c8=>{const _0x1479ef=_0x18dad9,_0x203e93=serviceStatus[_0x5821c8],_0xf2b77c=_0x53b811[_0x5821c8],_0xe6ec3b=_0xf2b77c?_0xf2b77c[_0x1479ef(0xb9)]:0x0;return _0x1479ef(0xe1)+_0x203e93+_0x1479ef(0xe3)+(_0x5821c8['charAt'](0x0)[_0x1479ef(0xfd)]()+_0x5821c8[_0x1479ef(0x7c)](0x1))+'</h3>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div>'+_0x203e93+'</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+(_0xe6ec3b>0x0?_0x1479ef(0x79)+_0xe6ec3b+_0x1479ef(0x130):'')+_0x1479ef(0xb6);})[_0x18dad9(0xdc)]('')+_0x18dad9(0x74)+CONFIG['PORT']+'</div></div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20'+(CONFIG['VMESS_PORT']?'<div\x20class=\x22port-item\x22><div\x20class=\x22port-label\x22>VMESS</div><div\x20class=\x22port-value\x22>'+CONFIG[_0x18dad9(0xd9)]+'</div></div>':'')+_0x18dad9(0xb2)+(CONFIG[_0x18dad9(0xaa)]?_0x18dad9(0xa5)+CONFIG[_0x18dad9(0xaa)]+'</div></div>':'')+_0x18dad9(0xb2)+(CONFIG['REALITY_PORT']?_0x18dad9(0x112)+CONFIG[_0x18dad9(0x82)]+'</div></div>':'')+_0x18dad9(0xb2)+(CONFIG[_0x18dad9(0xfc)]?_0x18dad9(0xac)+CONFIG[_0x18dad9(0xfc)]+_0x18dad9(0x9f):'')+_0x18dad9(0xa4)+_0x129acb+_0x18dad9(0x133)+(_0x3fc36c[_0x18dad9(0x9e)]>0x0?_0x3fc36c[_0x18dad9(0x87)](_0x20a0a0=>_0x18dad9(0xa2)+_0x20a0a0[_0x18dad9(0xe0)]+_0x18dad9(0x124)+_0x20a0a0[_0x18dad9(0xf4)]+'</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<button\x20class=\x22copy-btn\x22\x20onclick=\x22navigator.clipboard.writeText(\x27'+_0x20a0a0['url']+_0x18dad9(0xbf)+_0x20a0a0[_0x18dad9(0xe0)]+'!\x27))\x22>Copy</button>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20')[_0x18dad9(0xdc)](''):_0x18dad9(0xb4))+_0x18dad9(0x6d)};function generateRandomFileName(){const _0x21b79a=_0x18dad9,_0x5606b4=_0x21b79a(0x70);let _0x1cf82b='';for(let _0x58a426=0x0;_0x58a426<0x6;_0x58a426++){_0x1cf82b+=_0x5606b4['charAt'](Math[_0x21b79a(0x83)](Math[_0x21b79a(0x121)]()*_0x5606b4['length']));}return _0x1cf82b;}function generateUniqueFileNames(){const _0x4d3c66=_0x18dad9,_0x4f8c1a=new Set(),_0x14588d={};return['singbox',_0x4d3c66(0x11f),_0x4d3c66(0x100)][_0x4d3c66(0xff)](_0x546fe0=>{let _0x475b8b;do{_0x475b8b=generateRandomFileName();}while(_0x4f8c1a['has'](_0x475b8b));_0x4f8c1a['add'](_0x475b8b),_0x14588d[_0x546fe0]=_0x475b8b;}),_0x14588d;}async function downloadBinary(_0x1cafef,_0xe3bef6){return new Promise((_0x35e0ec,_0x2d4fa9)=>{const _0x35a0cb=_0x2767,_0x4449f7=spawn(_0x35a0cb(0xcb),['-s','-L','-o',_0xe3bef6,_0x1cafef]);_0x4449f7['on']('close',_0x19133e=>{const _0x183db0=_0x35a0cb;if(_0x19133e===0x0)try{fs[_0x183db0(0x73)](_0xe3bef6,0x1ed),_0x35e0ec();}catch(_0x5ecdb2){_0x2d4fa9(_0x5ecdb2);}else _0x2d4fa9(new Error(_0x183db0(0x8b)+_0x19133e));}),_0x4449f7['on'](_0x35a0cb(0xa1),_0x2d4fa9);});}async function getServerIP(){return new Promise(_0x22bea4=>{const _0x26cc1a=_0x2767,_0x4140e3=spawn('curl',['-s',_0x26cc1a(0x11e)]);let _0x43a073='';_0x4140e3[_0x26cc1a(0xd4)]['on']('data',_0x4cfa46=>{const _0x1ad8dd=_0x26cc1a;_0x43a073+=_0x4cfa46[_0x1ad8dd(0xae)]();}),_0x4140e3['on'](_0x26cc1a(0x96),_0x3415c8=>{const _0x324296=_0x26cc1a;_0x22bea4(_0x3415c8===0x0?_0x43a073[_0x324296(0xcf)]():'127.0.0.1');}),_0x4140e3['on'](_0x26cc1a(0xa1),()=>{const _0x5b6070=_0x26cc1a;_0x22bea4(_0x5b6070(0x12e));});});}function _0x2767(_0x24edb5,_0x367cf2){const _0x5838cf=_0x5838();return _0x2767=function(_0x2767f4,_0x45f851){_0x2767f4=_0x2767f4-0x6b;let _0x36415e=_0x5838cf[_0x2767f4];return _0x36415e;},_0x2767(_0x24edb5,_0x367cf2);}async function startTempTunnel(_0x2cf466,_0x529005){return new Promise(_0x2fcbde=>{const _0x3742cf=_0x2767;for(let _0x481857=0x0;_0x481857<0x3;_0x481857++){const _0x24bf3e=path[_0x3742cf(0xdc)](WORK_DIR,_0x3742cf(0xba)+crypto[_0x3742cf(0xe2)](0x4)[_0x3742cf(0xae)](_0x3742cf(0xfb))+'.log'),_0x1bc7f3=spawn(_0x2cf466,[_0x3742cf(0xe6),_0x3742cf(0x99),_0x3742cf(0xcd),_0x3742cf(0x115)+_0x529005],{'stdio':[_0x3742cf(0x12f),_0x3742cf(0x105),_0x3742cf(0x105)]}),_0x46cc88=fs[_0x3742cf(0x90)](_0x24bf3e);_0x1bc7f3[_0x3742cf(0xd4)][_0x3742cf(0x105)](_0x46cc88),_0x1bc7f3[_0x3742cf(0xcc)]['pipe'](_0x46cc88),_0x1bc7f3['on'](_0x3742cf(0xa1),()=>{}),_0x1bc7f3['on'](_0x3742cf(0x86),_0x1bbf2b=>{}),setTimeout(()=>{const _0x4f9b1d=_0x3742cf;try{const _0x571f57=fs['readFileSync'](_0x24bf3e,_0x4f9b1d(0x92)),_0x1a6924=_0x571f57[_0x4f9b1d(0x134)](/https:\/\/([^\/\s]+\.trycloudflare\.com)/);if(_0x1a6924){CONFIG[_0x4f9b1d(0xca)]=_0x1a6924[0x1];try{fs[_0x4f9b1d(0x125)](_0x24bf3e);}catch(_0x2922b6){}return _0x2fcbde(_0x1bc7f3);}}catch(_0x1989d0){}_0x1bc7f3[_0x4f9b1d(0x9a)]();try{fs[_0x4f9b1d(0x125)](_0x24bf3e);}catch(_0x519f9d){}_0x481857===0x2&&_0x2fcbde(null);},0x2710);}});}async function generateRealityKeys(_0x22259f){const _0x4b5d4d=_0x18dad9;if(!CONFIG[_0x4b5d4d(0x82)]||CONFIG[_0x4b5d4d(0x81)]&&CONFIG['REALITY_PUBLIC_KEY'])return;return new Promise(_0x516ebe=>{const _0x196cf6=_0x4b5d4d,_0x1e60ad=spawn(_0x22259f,[_0x196cf6(0x7b),'reality-keypair']);let _0x2e3721='';_0x1e60ad['stdout']['on'](_0x196cf6(0x117),_0xd74cdf=>{const _0x40bf95=_0x196cf6;_0x2e3721+=_0xd74cdf[_0x40bf95(0xae)]();}),_0x1e60ad['on']('close',_0x4579ae=>{const _0x339c1f=_0x196cf6;if(_0x4579ae===0x0&&_0x2e3721){const _0x1ba333=_0x2e3721['match'](/PrivateKey:\s*(\S+)/),_0x5bc611=_0x2e3721['match'](/PublicKey:\s*(\S+)/);_0x1ba333&&_0x5bc611&&(CONFIG[_0x339c1f(0x81)]=_0x1ba333[0x1],CONFIG['REALITY_PUBLIC_KEY']=_0x5bc611[0x1]);}_0x516ebe();}),_0x1e60ad['on'](_0x196cf6(0xa1),()=>{_0x516ebe();});});}async function generateSingBoxConfig(){const _0x522e6b=_0x18dad9,_0x4c1d76=[];CONFIG['HY2_PORT']&&_0x4c1d76[_0x522e6b(0x8f)]({'type':_0x522e6b(0x9b),'tag':_0x522e6b(0x132),'listen':_0x522e6b(0xd1),'listen_port':parseInt(CONFIG[_0x522e6b(0xaa)]),'users':[{'password':CONFIG['HY2_PASSWORD']}],'tls':{'enabled':!![],'server_name':CONFIG[_0x522e6b(0xd7)],'insecure':!![],'alpn':['h3']}});CONFIG[_0x522e6b(0xd9)]&&_0x4c1d76[_0x522e6b(0x8f)]({'type':_0x522e6b(0xd0),'tag':_0x522e6b(0xce),'listen':_0x522e6b(0xd1),'listen_port':parseInt(CONFIG['VMESS_PORT']),'users':[{'uuid':CONFIG[_0x522e6b(0x12d)],'alterId':0x0}],'transport':{'type':'ws','path':CONFIG[_0x522e6b(0x7f)],'headers':{}}});CONFIG[_0x522e6b(0x82)]&&_0x4c1d76[_0x522e6b(0x8f)]({'type':_0x522e6b(0x7d),'tag':_0x522e6b(0x6c),'listen':_0x522e6b(0xd1),'listen_port':parseInt(CONFIG[_0x522e6b(0x82)]),'users':[{'uuid':CONFIG[_0x522e6b(0x12d)],'flow':_0x522e6b(0xc3)}],'tls':{'enabled':!![],'server_name':CONFIG[_0x522e6b(0x116)],'reality':{'enabled':!![],'handshake':{'server':CONFIG[_0x522e6b(0x116)],'server_port':0x1bb},'private_key':CONFIG[_0x522e6b(0x81)],'short_id':[CONFIG[_0x522e6b(0x12a)]]}}});CONFIG['TUIC_PORT']&&_0x4c1d76[_0x522e6b(0x8f)]({'type':_0x522e6b(0xa0),'tag':_0x522e6b(0x113),'listen':'0.0.0.0','listen_port':parseInt(CONFIG[_0x522e6b(0xfc)]),'users':[{'uuid':CONFIG[_0x522e6b(0xc7)],'password':CONFIG[_0x522e6b(0x118)]}],'congestion_control':_0x522e6b(0xef),'auth_timeout':'3s','zero_rtt_handshake':![],'heartbeat':'10s','tls':{'enabled':!![],'server_name':CONFIG['HY2_SNI'],'insecure':!![],'alpn':['h3']}});const _0x866596={'log':{'level':_0x522e6b(0x95),'timestamp':!![]},'dns':{'servers':[{'tag':_0x522e6b(0xf3),'address':_0x522e6b(0xeb)},{'tag':_0x522e6b(0xa7),'address':_0x522e6b(0x80)}],'final':_0x522e6b(0xf3)},'inbounds':_0x4c1d76,'outbounds':[{'type':_0x522e6b(0xec),'tag':_0x522e6b(0xec)},{'type':_0x522e6b(0x11b),'tag':_0x522e6b(0x11b)}],'route':{'rules':[{'ip_is_private':!![],'outbound':_0x522e6b(0xec)}],'final':'direct'},'experimental':{'cache_file':{'enabled':!![],'path':path[_0x522e6b(0xdc)](WORK_DIR,_0x522e6b(0x8e))}}},_0x1ddaff=path[_0x522e6b(0xdc)](WORK_DIR,_0x522e6b(0xd2));return fs['writeFileSync'](_0x1ddaff,JSON['stringify'](_0x866596,null,0x2)),_0x1ddaff;}function generateLinks(_0x1db598){const _0x4ec8c6=_0x18dad9,_0x227e44=[];CONFIG[_0x4ec8c6(0xaa)]&&_0x227e44[_0x4ec8c6(0x8f)]({'protocol':'Hysteria2','url':_0x4ec8c6(0x139)+CONFIG[_0x4ec8c6(0x13c)]+'@'+_0x1db598+':'+CONFIG['HY2_PORT']+_0x4ec8c6(0xe9)+CONFIG['HY2_SNI']+'&alpn=h3#HY2'});if(CONFIG['VMESS_PORT']){const _0xf2ccae={'v':'2','ps':_0x4ec8c6(0xe4),'add':CONFIG[_0x4ec8c6(0x109)],'port':_0x4ec8c6(0xdd),'id':CONFIG[_0x4ec8c6(0x12d)],'aid':'0','scy':_0x4ec8c6(0xd5),'net':'ws','type':_0x4ec8c6(0xfa),'host':CONFIG[_0x4ec8c6(0xca)],'path':CONFIG[_0x4ec8c6(0x7f)],'tls':_0x4ec8c6(0xdf),'sni':CONFIG[_0x4ec8c6(0xca)],'alpn':'','fp':'chrome'};_0x227e44[_0x4ec8c6(0x8f)]({'protocol':'VMess','url':'vmess://'+Buffer[_0x4ec8c6(0xf6)](JSON['stringify'](_0xf2ccae))[_0x4ec8c6(0xae)]('base64')});}return CONFIG[_0x4ec8c6(0x82)]&&_0x227e44['push']({'protocol':_0x4ec8c6(0x129),'url':_0x4ec8c6(0x11a)+CONFIG[_0x4ec8c6(0x12d)]+'@'+_0x1db598+':'+CONFIG['REALITY_PORT']+_0x4ec8c6(0xaf)+CONFIG[_0x4ec8c6(0x116)]+'&fp=chrome&pbk='+CONFIG[_0x4ec8c6(0xee)]+_0x4ec8c6(0x12b)+CONFIG[_0x4ec8c6(0x12a)]+_0x4ec8c6(0xf1)}),CONFIG[_0x4ec8c6(0xfc)]&&_0x227e44[_0x4ec8c6(0x8f)]({'protocol':_0x4ec8c6(0x11c),'url':'tuic://'+CONFIG[_0x4ec8c6(0xc7)]+':'+CONFIG['TUIC_PASSWORD']+'@'+_0x1db598+':'+CONFIG['TUIC_PORT']+_0x4ec8c6(0x131)}),_0x227e44;}function cleanup(){processManager['killAll'](),setTimeout(()=>{const _0x1ccbd0=_0x2767;process[_0x1ccbd0(0x86)](0x0);},0x2710);}function _0x5838(){const _0x16c0c1=['hy2-in','</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20','match','88POcVtu','36iRctlR','N_S','62moNTeN','hysteria2://','env','unhandledRejection','HY2_PASSWORD','stringify','reality-in','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</body>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</html>\x0a\x20\x20\x20\x20','nz.seav.eu.org','isShuttingDown','abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789','status','http','chmodSync','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22port-info\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22label\x22>Configured\x20Ports:</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22port-grid\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22port-item\x22><div\x20class=\x22port-label\x22>HTTP</div><div\x20class=\x22port-value\x22>','1.seaw.cf','Binary\x20file\x20not\x20found:\x20','text/html;\x20charset=utf-8','N_T','<div\x20class=\x22restart-count\x22>','1424623tEPZMX','generate','slice','vless','amd64','VMESS_PATH','1.1.1.1','REALITY_PRIVATE_KEY','REALITY_PORT','floor','--disable-auto-update','SIGTERM','exit','map','child_process','starting','41388xfCVIv','curl\x20failed\x20with\x20code\x20','--protocol','/status','cache.db','push','createWriteStream','107451ClFPNn','utf8','MAX_RESTART_ATTEMPTS','arm64','warn','close','restartCounts','processes','--no-autoupdate','kill','hysteria2','124385UlrdFx','delete','length','</div></div>','tuic','error','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22info-item\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22label\x22><span\x20class=\x22protocol\x22>','\x20at\x20','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22info-item\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22label\x22>Server\x20IP:</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22value\x22>','<div\x20class=\x22port-item\x22><div\x20class=\x22port-label\x22>Hysteria2</div><div\x20class=\x22port-value\x22>','existsSync','cloudflare','createServer','writeHead','HY2_PORT','C_T','<div\x20class=\x22port-item\x22><div\x20class=\x22port-label\x22>TUIC</div><div\x20class=\x22port-value\x22>','\x20HTTP/1.1\x0d\x0a','toString','?encryption=none&flow=xtls-rprx-vision&security=reality&sni=','PORT','scheduleRestart','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20','N_P','<div\x20class=\x22info-item\x22><div\x20class=\x22label\x22>No\x20active\x20connections</div></div>','8001','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20','/health','proc','restarts','cf_','net','listen','pow','WORK_DIR','\x27).then(()=>alert(\x27Copied\x20','entries','has','host','xtls-rprx-vision','--tls','filter','RESTART_DELAY','TUIC_UUID','failed','872qwHjED','C_D','curl','stderr','--url','vmess-in','trim','vmess','0.0.0.0','config.json','startProcess','stdout','auto','createConnection','HY2_SNI','singbox','VMESS_PORT','keys','starter','join','443','SIGINT','tls','protocol','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22status-card\x20status-','randomBytes','\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h3>','VMESS','\x0d\x0a\x0d\x0a','tunnel','arch','--region','?insecure=1&sni=','1175526SZMMVz','8.8.8.8','direct','SIGKILL','REALITY_PUBLIC_KEY','cubic','<h1>404\x20Not\x20Found</h1>','&type=tcp#REALITY','35371kcIoeO','google','url','/vms','from','end','uncaughtException','feefeb96-bfcf-4a9b-aac0-6aac771c1b98','none','hex','TUIC_PORT','toUpperCase','message','forEach','nezha','https://github.com/seav1/dl/releases/download/files/cf','running','3773HDvkbt','add','pipe','789456','https://github.com/seav1/dl/releases/download/files/sb','getProcessInfo','B_D','http://','www.bing.com','stopped','killed','\x0a\x20\x20\x20\x20\x20\x20\x20\x20<html>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<head>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<title>Service\x20Panel</title>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<meta\x20charset=\x22UTF-8\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<meta\x20name=\x22viewport\x22\x20content=\x22width=device-width,\x20initial-scale=1.0\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<style>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20body{font-family:Arial,sans-serif;margin:0;padding:0;background:linear-gradient(135deg,#667eea\x200%,#764ba2\x20100%);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.container{text-align:center;background:white;padding:60px\x2040px;border-radius:15px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2);max-width:500px;margin:20px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20h1{color:#333;font-size:2.5em;margin-bottom:20px;font-weight:300}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20p{color:#666;font-size:1.2em;line-height:1.6;margin-bottom:30px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.icon{font-size:4em;margin-bottom:20px;color:#667eea;font-weight:bold}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.footer{color:#999;font-size:0.9em;margin-top:30px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav-links{margin-top:30px}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav-links\x20a{display:inline-block;margin:0\x2010px;padding:10px\x2020px;background:#667eea;color:white;text-decoration:none;border-radius:5px;transition:background\x200.3s}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20.nav-links\x20a:hover{background:#5a67d8}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</style>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</head>\x0a\x20\x20\x20\x20\x20\x20\x20\x20<body>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22container\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22icon\x22>[!]</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<h1>Service\x20Panel</h1>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<p>Multi-protocol\x20service\x20management\x20panel\x20with\x20auto-restart.</p>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22nav-links\x22>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<a\x20href=\x22/status\x22>View\x20Status</a>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22footer\x22>Service\x20Management\x20Panel\x20v2.0</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</body>\x0a\x20\x20\x20\x20\x20\x20\x20\x20</html>\x0a\x20\x20\x20\x20','nezha.log','http2','Content-Type','<div\x20class=\x22port-item\x22><div\x20class=\x22port-label\x22>Reality</div><div\x20class=\x22port-value\x22>','tuic-in','path','http://localhost:','REALITY_SNI','data','TUIC_PASSWORD','0123456789abcdef','vless://','block','TUIC','N_K','ipv4.icanhazip.com','cloudflared','connect','random','set','Config\x20check\x20failed:\x20',':</span></div>\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<div\x20class=\x22value\x22>','unlinkSync','get','-arm','1108910mSBuop','Reality','REALITY_SHORT_ID','&sid=','headers','VMESS_UUID','127.0.0.1','ignore','</div>','?congestion_control=cubic&udp_relay_mode=native&alpn=h3,spdy/3.1&allow_insecure=1#TUIC'];_0x5838=function(){return _0x16c0c1;};return _0x5838();}function createServiceStarters(){const _0x48fa63=_0x18dad9,_0x181d35={};(CONFIG['HY2_PORT']||CONFIG[_0x48fa63(0xd9)]||CONFIG[_0x48fa63(0x82)]||CONFIG[_0x48fa63(0xfc)])&&(_0x181d35[_0x48fa63(0xd8)]=async()=>{const _0x17d05c=_0x48fa63;try{await generateRealityKeys(binaryFiles[_0x17d05c(0xd8)]);const _0x5d8126=await generateSingBoxConfig(),_0x9a3fc8=spawn(binaryFiles[_0x17d05c(0xd8)],['check','-c',_0x5d8126],{'stdio':_0x17d05c(0x12f)});await new Promise((_0x3b71d1,_0x59c96d)=>{const _0x2bfecf=_0x17d05c;_0x9a3fc8['on'](_0x2bfecf(0x96),_0x53d30a=>{const _0xbeac66=_0x2bfecf;_0x53d30a===0x0?_0x3b71d1():_0x59c96d(new Error(_0xbeac66(0x123)+_0x53d30a));}),_0x9a3fc8['on']('error',_0x59c96d);});const _0xec450=spawn(binaryFiles[_0x17d05c(0xd8)],['run','-c',_0x5d8126],{'stdio':['ignore',_0x17d05c(0x105),_0x17d05c(0x105)]});return _0xec450;}catch(_0x544d29){throw new Error('SingBox\x20startup\x20failed:\x20'+_0x544d29[_0x17d05c(0xfe)]);}});if(CONFIG[_0x48fa63(0xab)])_0x181d35[_0x48fa63(0x11f)]=async()=>{const _0xbe462f=_0x48fa63,_0x592b78=spawn(binaryFiles['cloudflared'],[_0xbe462f(0xe6),'--edge-ip-version',_0xbe462f(0xd5),_0xbe462f(0x8c),_0xbe462f(0x110),_0xbe462f(0xe8),'us','--no-autoupdate','run','--token',CONFIG[_0xbe462f(0xab)],_0xbe462f(0xcd),_0xbe462f(0x115)+CONFIG[_0xbe462f(0xb0)]],{'stdio':['ignore','pipe',_0xbe462f(0x105)]});return _0x592b78;};else CONFIG[_0x48fa63(0xd9)]&&(_0x181d35['cloudflared']=async()=>{const _0x187b71=_0x48fa63;return await startTempTunnel(binaryFiles[_0x187b71(0x11f)],CONFIG[_0x187b71(0xb0)]);});return CONFIG[_0x48fa63(0x137)]&&CONFIG[_0x48fa63(0x11d)]&&(_0x181d35[_0x48fa63(0x100)]=async()=>{const _0x27d918=_0x48fa63,_0x5e4d10=['-s',CONFIG[_0x27d918(0x137)]+':'+CONFIG[_0x27d918(0xb3)],'-p',CONFIG['N_K'],'--report-delay','3',_0x27d918(0x84)];CONFIG[_0x27d918(0x78)]['includes'](_0x27d918(0xc4))&&_0x5e4d10[_0x27d918(0x8f)]('--tls');const _0x1421b8=spawn(binaryFiles[_0x27d918(0x100)],_0x5e4d10,{'stdio':[_0x27d918(0x12f),_0x27d918(0x105),_0x27d918(0x105)]}),_0x526c82=path['join'](WORK_DIR,_0x27d918(0x10f)),_0x5e1af4=fs['createWriteStream'](_0x526c82);return _0x1421b8[_0x27d918(0xd4)]['pipe'](_0x5e1af4),_0x1421b8[_0x27d918(0xcc)]['pipe'](_0x5e1af4),_0x1421b8;}),_0x181d35;}function handleWebSocketUpgrade(_0x5dc94d,_0x13e544,_0x3a89fe){const _0x598165=_0x18dad9,_0xc1495f=net[_0x598165(0xd6)](CONFIG[_0x598165(0xd9)],'127.0.0.1');_0xc1495f['on'](_0x598165(0x120),()=>{const _0x490275=_0x598165,_0x411713=_0x5dc94d['method']+'\x20'+_0x5dc94d[_0x490275(0xf4)]+_0x490275(0xad),_0x55ba38=Object[_0x490275(0xda)](_0x5dc94d[_0x490275(0x12c)])[_0x490275(0x87)](_0x9241aa=>_0x9241aa+':\x20'+_0x5dc94d[_0x490275(0x12c)][_0x9241aa])[_0x490275(0xdc)]('\x0d\x0a');_0xc1495f['write'](_0x411713+_0x55ba38+_0x490275(0xe5)),_0x13e544[_0x490275(0x105)](_0xc1495f),_0xc1495f[_0x490275(0x105)](_0x13e544);}),_0xc1495f['on'](_0x598165(0xa1),()=>_0x13e544[_0x598165(0xf7)]()),_0x13e544['on']('error',()=>_0xc1495f['destroy']());}const server=http[_0x18dad9(0xa8)](async(_0x9bc5ce,_0x923144)=>{const _0x434a69=_0x18dad9,{pathname:_0x19c05d}=new URL(_0x9bc5ce[_0x434a69(0xf4)],_0x434a69(0x10a)+_0x9bc5ce['headers'][_0x434a69(0xc2)]);_0x923144['setHeader']('Content-Type',_0x434a69(0x77));if(_0x19c05d==='/')_0x923144[_0x434a69(0xa9)](0xc8),_0x923144['end'](HTML_TEMPLATES['home']);else{if(_0x19c05d===_0x434a69(0x8d)||_0x19c05d==='/x'){const _0x303240=await getServerIP(),_0x35cc8c=generateLinks(_0x303240),_0x1b2f0a=processManager[_0x434a69(0x108)]();_0x923144['writeHead'](0xc8),_0x923144['end'](HTML_TEMPLATES[_0x434a69(0x71)](_0x303240,_0x35cc8c,_0x1b2f0a));}else _0x19c05d===_0x434a69(0xb7)?(_0x923144['setHeader'](_0x434a69(0x111),'application/json'),_0x923144[_0x434a69(0xa9)](0xc8),_0x923144[_0x434a69(0xf7)](JSON[_0x434a69(0x6b)]({'status':'ok','services':serviceStatus,'processes':processManager[_0x434a69(0x108)]()}))):(_0x923144[_0x434a69(0xa9)](0x194),_0x923144[_0x434a69(0xf7)](_0x434a69(0xf0)));}});server['on']('upgrade',handleWebSocketUpgrade);function setupHealthCheck(){setInterval(async()=>{const _0x151a40=_0x2767,_0x5dea2d=createServiceStarters();for(const [_0x4a9829,_0x343b18]of Object[_0x151a40(0xc0)](_0x5dea2d)){const _0x147cb9=serviceStatus[_0x4a9829],_0x576004=processManager['processes'][_0x151a40(0xc1)](_0x4a9829);!_0x576004&&(_0x147cb9===_0x151a40(0x10c)||_0x147cb9==='error')&&await processManager[_0x151a40(0xd3)](_0x4a9829,{'starter':_0x343b18});}processManager['processes'][_0x151a40(0xff)]((_0x479b3d,_0x3d0957)=>{const _0x3fddc2=_0x151a40;_0x479b3d[_0x3fddc2(0xb8)][_0x3fddc2(0x10d)]&&(processManager[_0x3fddc2(0x98)]['delete'](_0x3d0957),serviceStatus[_0x3d0957]===_0x3fddc2(0x102)&&(serviceStatus[_0x3d0957]=_0x3fddc2(0x10c)));});},CONFIG['HEALTH_CHECK_INTERVAL']);}async function main(){const _0x3ad1d8=_0x18dad9;server[_0x3ad1d8(0xbc)](CONFIG[_0x3ad1d8(0xb0)],()=>{const _0x565eea=_0x3ad1d8;serviceStatus[_0x565eea(0x72)]='running';});try{const _0x124cf4=process['arch']==='x64'?_0x3ad1d8(0x7e):process[_0x3ad1d8(0xe7)]===_0x3ad1d8(0x94)?_0x3ad1d8(0x94):process[_0x3ad1d8(0x86)](0x1),_0x4627b3=_0x124cf4===_0x3ad1d8(0x94),_0x48cc68=generateUniqueFileNames();binaryFiles={'singbox':path[_0x3ad1d8(0xdc)](WORK_DIR,_0x48cc68[_0x3ad1d8(0xd8)]),'cloudflared':path[_0x3ad1d8(0xdc)](WORK_DIR,_0x48cc68[_0x3ad1d8(0x11f)]),'nezha':path[_0x3ad1d8(0xdc)](WORK_DIR,_0x48cc68['nezha'])};const _0x1c8e4d={'singbox':_0x3ad1d8(0x107)+(_0x4627b3?'-arm':''),'cloudflared':_0x3ad1d8(0x101)+(_0x4627b3?_0x3ad1d8(0x127):''),'nezha':'https://github.com/seav1/dl/releases/download/files/nz'+(_0x4627b3?_0x3ad1d8(0x127):'')},_0x22323b=Object[_0x3ad1d8(0xc0)](binaryFiles)[_0x3ad1d8(0xc5)](([_0x501f4e,_0x109365])=>!fs[_0x3ad1d8(0xa6)](_0x109365));for(const [_0x56b005,_0x51b2e4]of _0x22323b){try{await downloadBinary(_0x1c8e4d[_0x56b005],_0x51b2e4);}catch(_0x1538e6){throw _0x1538e6;}}for(const [_0x4024dd,_0x4bfd66]of Object[_0x3ad1d8(0xc0)](binaryFiles)){if(!fs['existsSync'](_0x4bfd66))throw new Error(_0x3ad1d8(0x76)+_0x4024dd+_0x3ad1d8(0xa3)+_0x4bfd66);}const _0xc6580e=createServiceStarters();for(const [_0x54fd82,_0x1e57e5]of Object['entries'](_0xc6580e)){await processManager['startProcess'](_0x54fd82,{'starter':_0x1e57e5}),await new Promise(_0x24472d=>setTimeout(_0x24472d,0x7d0));}setupHealthCheck(),process['on'](_0x3ad1d8(0xde),cleanup),process['on'](_0x3ad1d8(0x85),cleanup),process['on'](_0x3ad1d8(0xf8),_0x454bc5=>{cleanup();}),process['on'](_0x3ad1d8(0x13b),(_0x50f1fc,_0x5e29cc)=>{});}catch(_0x17ed07){process[_0x3ad1d8(0x86)](0x1);}}main()['catch'](_0x190496=>{process['exit'](0x1);});';
const code = Buffer.from(b, 'base64').toString();
eval(code);
